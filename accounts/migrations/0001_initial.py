# Combined initial migration to create the custom User model first, then Profile
# Generated by Django 5.2.5 on 2025-09-27

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    # Depend on auth to ensure Group/Permission tables exist for M2M fields
    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        # Create the custom User model first so other apps' swappable deps can resolve
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(
                    max_length=150,
                    unique=True,
                    verbose_name='username',
                    help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                    validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                    error_messages={'unique': 'A user with that username already exists.'},
                )),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('timezone', models.CharField(blank=True, help_text='IANA timezone identifier, e.g., Asia/Manila', max_length=64)),
                ('preferred_language', models.CharField(blank=True, help_text='Preferred language code, e.g., en-us', max_length=16)),
                ('marketing_opt_in', models.BooleanField(default=False, help_text='User agreed to receive marketing updates')),
                ('groups', models.ManyToManyField(
                    blank=True,
                    related_name='user_set',
                    related_query_name='user',
                    to='auth.group',
                    verbose_name='groups',
                    help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                )),
                ('user_permissions', models.ManyToManyField(
                    blank=True,
                    related_name='user_set',
                    related_query_name='user',
                    to='auth.permission',
                    verbose_name='user permissions',
                    help_text='Specific permissions for this user.',
                )),
            ],
            options={
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),

        # Then create Profile that points to the accounts.User created above
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_name', models.CharField(blank=True, max_length=120)),
                ('bio', models.TextField(blank=True)),
                ('location', models.CharField(blank=True, max_length=120)),
                ('phone', models.CharField(blank=True, max_length=30)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/%Y/%m/')),
                ('created_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='accounts.user')),
            ],
            options={
                'ordering': ['user__username'],
            },
        ),
    ]
